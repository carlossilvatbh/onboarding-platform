name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Job 1: Quick Validation
  quick-check:
    name: ⚡ Quick Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better diff analysis
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Check Python syntax
      run: |
        cd backend
        python -m py_compile $(find apps/ -name "*.py")
    
    - name: Run Black on changed files
      run: |
        cd backend
        # Get changed Python files
        CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD -- "*.py" | grep -E "^apps/" || true)
        if [ ! -z "$CHANGED_FILES" ]; then
          echo "Checking formatting for: $CHANGED_FILES"
          black --check --diff $CHANGED_FILES
        else
          echo "No Python files changed in apps/"
        fi
    
    - name: Run flake8 on changed files
      run: |
        cd backend
        # Get changed Python files
        CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD -- "*.py" | grep -E "^apps/" || true)
        if [ ! -z "$CHANGED_FILES" ]; then
          echo "Linting: $CHANGED_FILES"
          flake8 $CHANGED_FILES
        else
          echo "No Python files changed in apps/"
        fi
    
    - name: Check Django migrations
      run: |
        cd backend
        python manage.py makemigrations --check --dry-run
      env:
        DJANGO_ENVIRONMENT: development
        SECRET_KEY: 'test-secret-key-for-ci'
        DB_NAME: ':memory:'
        DB_ENGINE: 'django.db.backends.sqlite3'

  # Job 2: Test Changed Components
  test-changes:
    name: 🧪 Test Changes
    runs-on: ubuntu-latest
    needs: [quick-check]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_onboarding
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run migrations
      run: |
        cd backend
        python manage.py migrate
      env:
        DJANGO_ENVIRONMENT: development
        SECRET_KEY: 'test-secret-key-for-ci'
        DB_NAME: test_onboarding
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        CACHE_URL: redis://localhost:6379/1
        CELERY_BROKER_URL: redis://localhost:6379/0
    
    - name: Identify changed test files
      id: changed-tests
      run: |
        cd backend
        # Get changed test files
        CHANGED_TEST_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD -- "*/test*.py" "*/tests/*.py" | tr '\n' ' ')
        echo "changed_tests=$CHANGED_TEST_FILES" >> $GITHUB_OUTPUT
        
        # Get changed app directories
        CHANGED_APPS=$(git diff --name-only origin/${{ github.base_ref }}...HEAD -- "apps/*" | cut -d'/' -f2 | sort -u | tr '\n' ' ')
        echo "changed_apps=$CHANGED_APPS" >> $GITHUB_OUTPUT
    
    - name: Run tests for changed components
      run: |
        cd backend
        if [ ! -z "${{ steps.changed-tests.outputs.changed_tests }}" ]; then
          echo "Running specific test files: ${{ steps.changed-tests.outputs.changed_tests }}"
          pytest ${{ steps.changed-tests.outputs.changed_tests }} -v
        elif [ ! -z "${{ steps.changed-tests.outputs.changed_apps }}" ]; then
          echo "Running tests for changed apps: ${{ steps.changed-tests.outputs.changed_apps }}"
          for app in ${{ steps.changed-tests.outputs.changed_apps }}; do
            if [ -d "apps/$app" ]; then
              pytest apps/$app/ -v
            fi
          done
        else
          echo "No specific tests to run, running quick smoke tests"
          pytest apps/ -k "test_placeholder or test_create" -v --maxfail=5
        fi
      env:
        DJANGO_ENVIRONMENT: development
        SECRET_KEY: 'test-secret-key-for-ci'
        DB_NAME: test_onboarding
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        CACHE_URL: redis://localhost:6379/1
        CELERY_BROKER_URL: redis://localhost:6379/0

  # Job 3: Security Check for PR
  security-check:
    name: 🔒 Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        pip install bandit
    
    - name: Run Bandit on changed files
      run: |
        cd backend
        # Get changed Python files
        CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD -- "*.py" | grep -E "^apps/" || true)
        if [ ! -z "$CHANGED_FILES" ]; then
          echo "Security check for: $CHANGED_FILES"
          bandit $CHANGED_FILES
        else
          echo "No Python files changed in apps/"
        fi

  # Job 4: PR Summary
  pr-summary:
    name: 📋 PR Summary
    runs-on: ubuntu-latest
    needs: [quick-check, test-changes, security-check]
    if: always()
    
    steps:
    - name: Generate PR summary
      run: |
        echo "## 📋 Pull Request Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check job results
        if [ "${{ needs.quick-check.result }}" == "success" ]; then
          echo "✅ **Quick Validation**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Quick Validation**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.test-changes.result }}" == "success" ]; then
          echo "✅ **Tests**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Tests**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.security-check.result }}" == "success" ]; then
          echo "✅ **Security**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Security**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔍 Next Steps" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.quick-check.result }}" == "success" ] && [ "${{ needs.test-changes.result }}" == "success" ] && [ "${{ needs.security-check.result }}" == "success" ]; then
          echo "🎉 All checks passed! This PR is ready for review." >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Some checks failed. Please review the errors and fix them before merging." >> $GITHUB_STEP_SUMMARY
        fi

